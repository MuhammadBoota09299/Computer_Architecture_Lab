$date
	Mon Feb 17 21:34:58 2025
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module single_cycle_tb $end
$var reg 1 ! clock $end
$var reg 1 " reset $end

$scope module uut $end
$var wire 1 # reset $end
$var wire 1 $ clock $end
$var reg 32 % inst [31:0] $end
$var reg 32 & pc [31:0] $end
$var reg 32 ' pc_next [31:0] $end
$var reg 32 ( result [31:0] $end
$var reg 32 ) rdata1 [31:0] $end
$var reg 32 * rdata2 [31:0] $end
$var reg 32 + rs2 [31:0] $end
$var reg 32 , immediate [31:0] $end
$var reg 32 - mem_rdata [31:0] $end
$var reg 32 . reg_data [31:0] $end
$var reg 4 / alu_op [3:0] $end
$var reg 3 0 rd_wr_mem [2:0] $end
$var reg 2 1 wb_sel [1:0] $end
$var reg 1 2 reg_wr $end
$var reg 1 3 sel_B $end
$var reg 1 4 mem_wr $end

$scope module _pc $end
$var reg 32 5 pc [31:0] $end
$var wire 1 $ clock $end
$var wire 1 # reset $end
$var wire 1 6 pc_next [31] $end
$var wire 1 7 pc_next [30] $end
$var wire 1 8 pc_next [29] $end
$var wire 1 9 pc_next [28] $end
$var wire 1 : pc_next [27] $end
$var wire 1 ; pc_next [26] $end
$var wire 1 < pc_next [25] $end
$var wire 1 = pc_next [24] $end
$var wire 1 > pc_next [23] $end
$var wire 1 ? pc_next [22] $end
$var wire 1 @ pc_next [21] $end
$var wire 1 A pc_next [20] $end
$var wire 1 B pc_next [19] $end
$var wire 1 C pc_next [18] $end
$var wire 1 D pc_next [17] $end
$var wire 1 E pc_next [16] $end
$var wire 1 F pc_next [15] $end
$var wire 1 G pc_next [14] $end
$var wire 1 H pc_next [13] $end
$var wire 1 I pc_next [12] $end
$var wire 1 J pc_next [11] $end
$var wire 1 K pc_next [10] $end
$var wire 1 L pc_next [9] $end
$var wire 1 M pc_next [8] $end
$var wire 1 N pc_next [7] $end
$var wire 1 O pc_next [6] $end
$var wire 1 P pc_next [5] $end
$var wire 1 Q pc_next [4] $end
$var wire 1 R pc_next [3] $end
$var wire 1 S pc_next [2] $end
$var wire 1 T pc_next [1] $end
$var wire 1 U pc_next [0] $end
$upscope $end

$scope module pc_4_add $end
$var wire 1 V pc [31] $end
$var wire 1 W pc [30] $end
$var wire 1 X pc [29] $end
$var wire 1 Y pc [28] $end
$var wire 1 Z pc [27] $end
$var wire 1 [ pc [26] $end
$var wire 1 \ pc [25] $end
$var wire 1 ] pc [24] $end
$var wire 1 ^ pc [23] $end
$var wire 1 _ pc [22] $end
$var wire 1 ` pc [21] $end
$var wire 1 a pc [20] $end
$var wire 1 b pc [19] $end
$var wire 1 c pc [18] $end
$var wire 1 d pc [17] $end
$var wire 1 e pc [16] $end
$var wire 1 f pc [15] $end
$var wire 1 g pc [14] $end
$var wire 1 h pc [13] $end
$var wire 1 i pc [12] $end
$var wire 1 j pc [11] $end
$var wire 1 k pc [10] $end
$var wire 1 l pc [9] $end
$var wire 1 m pc [8] $end
$var wire 1 n pc [7] $end
$var wire 1 o pc [6] $end
$var wire 1 p pc [5] $end
$var wire 1 q pc [4] $end
$var wire 1 r pc [3] $end
$var wire 1 s pc [2] $end
$var wire 1 t pc [1] $end
$var wire 1 u pc [0] $end
$var reg 32 v pc_next [31:0] $end
$upscope $end

$scope module _instruction_memory $end
$var wire 1 w addr [31] $end
$var wire 1 x addr [30] $end
$var wire 1 y addr [29] $end
$var wire 1 z addr [28] $end
$var wire 1 { addr [27] $end
$var wire 1 | addr [26] $end
$var wire 1 } addr [25] $end
$var wire 1 ~ addr [24] $end
$var wire 1 !! addr [23] $end
$var wire 1 "! addr [22] $end
$var wire 1 #! addr [21] $end
$var wire 1 $! addr [20] $end
$var wire 1 %! addr [19] $end
$var wire 1 &! addr [18] $end
$var wire 1 '! addr [17] $end
$var wire 1 (! addr [16] $end
$var wire 1 )! addr [15] $end
$var wire 1 *! addr [14] $end
$var wire 1 +! addr [13] $end
$var wire 1 ,! addr [12] $end
$var wire 1 -! addr [11] $end
$var wire 1 .! addr [10] $end
$var wire 1 /! addr [9] $end
$var wire 1 0! addr [8] $end
$var wire 1 1! addr [7] $end
$var wire 1 2! addr [6] $end
$var wire 1 3! addr [5] $end
$var wire 1 4! addr [4] $end
$var wire 1 5! addr [3] $end
$var wire 1 6! addr [2] $end
$var wire 1 7! addr [1] $end
$var wire 1 8! addr [0] $end
$var reg 32 9! inst [31:0] $end
$upscope $end

$scope module _registerfile $end
$var wire 1 :! raddr1 [4] $end
$var wire 1 ;! raddr1 [3] $end
$var wire 1 <! raddr1 [2] $end
$var wire 1 =! raddr1 [1] $end
$var wire 1 >! raddr1 [0] $end
$var wire 1 ?! raddr2 [4] $end
$var wire 1 @! raddr2 [3] $end
$var wire 1 A! raddr2 [2] $end
$var wire 1 B! raddr2 [1] $end
$var wire 1 C! raddr2 [0] $end
$var wire 1 D! waddr [4] $end
$var wire 1 E! waddr [3] $end
$var wire 1 F! waddr [2] $end
$var wire 1 G! waddr [1] $end
$var wire 1 H! waddr [0] $end
$var wire 1 I! wdata [31] $end
$var wire 1 J! wdata [30] $end
$var wire 1 K! wdata [29] $end
$var wire 1 L! wdata [28] $end
$var wire 1 M! wdata [27] $end
$var wire 1 N! wdata [26] $end
$var wire 1 O! wdata [25] $end
$var wire 1 P! wdata [24] $end
$var wire 1 Q! wdata [23] $end
$var wire 1 R! wdata [22] $end
$var wire 1 S! wdata [21] $end
$var wire 1 T! wdata [20] $end
$var wire 1 U! wdata [19] $end
$var wire 1 V! wdata [18] $end
$var wire 1 W! wdata [17] $end
$var wire 1 X! wdata [16] $end
$var wire 1 Y! wdata [15] $end
$var wire 1 Z! wdata [14] $end
$var wire 1 [! wdata [13] $end
$var wire 1 \! wdata [12] $end
$var wire 1 ]! wdata [11] $end
$var wire 1 ^! wdata [10] $end
$var wire 1 _! wdata [9] $end
$var wire 1 `! wdata [8] $end
$var wire 1 a! wdata [7] $end
$var wire 1 b! wdata [6] $end
$var wire 1 c! wdata [5] $end
$var wire 1 d! wdata [4] $end
$var wire 1 e! wdata [3] $end
$var wire 1 f! wdata [2] $end
$var wire 1 g! wdata [1] $end
$var wire 1 h! wdata [0] $end
$var wire 1 i! reg_wr $end
$var wire 1 $ clock $end
$var wire 1 # reset $end
$var reg 32 j! rdata1 [31:0] $end
$var reg 32 k! rdata2 [31:0] $end
$upscope $end

$scope module _decoder $end
$var wire 1 l! instruction [31] $end
$var wire 1 m! instruction [30] $end
$var wire 1 n! instruction [29] $end
$var wire 1 o! instruction [28] $end
$var wire 1 p! instruction [27] $end
$var wire 1 q! instruction [26] $end
$var wire 1 r! instruction [25] $end
$var wire 1 s! instruction [24] $end
$var wire 1 t! instruction [23] $end
$var wire 1 u! instruction [22] $end
$var wire 1 v! instruction [21] $end
$var wire 1 w! instruction [20] $end
$var wire 1 x! instruction [19] $end
$var wire 1 y! instruction [18] $end
$var wire 1 z! instruction [17] $end
$var wire 1 {! instruction [16] $end
$var wire 1 |! instruction [15] $end
$var wire 1 }! instruction [14] $end
$var wire 1 ~! instruction [13] $end
$var wire 1 !" instruction [12] $end
$var wire 1 "" instruction [11] $end
$var wire 1 #" instruction [10] $end
$var wire 1 $" instruction [9] $end
$var wire 1 %" instruction [8] $end
$var wire 1 &" instruction [7] $end
$var wire 1 '" instruction [6] $end
$var wire 1 (" instruction [5] $end
$var wire 1 )" instruction [4] $end
$var wire 1 *" instruction [3] $end
$var wire 1 +" instruction [2] $end
$var wire 1 ," instruction [1] $end
$var wire 1 -" instruction [0] $end
$var reg 1 ." reg_wr $end
$var reg 1 /" sel_B $end
$var reg 1 0" mem_wr $end
$var reg 2 1" wb_sel [1:0] $end
$var reg 3 2" rd_wr_mem [2:0] $end
$var reg 32 3" immediate [31:0] $end
$var reg 4 4" alu_op [3:0] $end
$var reg 3 5" funct3 [2:0] $end
$var reg 7 6" opcode [6:0] $end
$upscope $end

$scope module Sel_B $end
$var wire 1 7" input0 [31] $end
$var wire 1 8" input0 [30] $end
$var wire 1 9" input0 [29] $end
$var wire 1 :" input0 [28] $end
$var wire 1 ;" input0 [27] $end
$var wire 1 <" input0 [26] $end
$var wire 1 =" input0 [25] $end
$var wire 1 >" input0 [24] $end
$var wire 1 ?" input0 [23] $end
$var wire 1 @" input0 [22] $end
$var wire 1 A" input0 [21] $end
$var wire 1 B" input0 [20] $end
$var wire 1 C" input0 [19] $end
$var wire 1 D" input0 [18] $end
$var wire 1 E" input0 [17] $end
$var wire 1 F" input0 [16] $end
$var wire 1 G" input0 [15] $end
$var wire 1 H" input0 [14] $end
$var wire 1 I" input0 [13] $end
$var wire 1 J" input0 [12] $end
$var wire 1 K" input0 [11] $end
$var wire 1 L" input0 [10] $end
$var wire 1 M" input0 [9] $end
$var wire 1 N" input0 [8] $end
$var wire 1 O" input0 [7] $end
$var wire 1 P" input0 [6] $end
$var wire 1 Q" input0 [5] $end
$var wire 1 R" input0 [4] $end
$var wire 1 S" input0 [3] $end
$var wire 1 T" input0 [2] $end
$var wire 1 U" input0 [1] $end
$var wire 1 V" input0 [0] $end
$var wire 1 W" input1 [31] $end
$var wire 1 X" input1 [30] $end
$var wire 1 Y" input1 [29] $end
$var wire 1 Z" input1 [28] $end
$var wire 1 [" input1 [27] $end
$var wire 1 \" input1 [26] $end
$var wire 1 ]" input1 [25] $end
$var wire 1 ^" input1 [24] $end
$var wire 1 _" input1 [23] $end
$var wire 1 `" input1 [22] $end
$var wire 1 a" input1 [21] $end
$var wire 1 b" input1 [20] $end
$var wire 1 c" input1 [19] $end
$var wire 1 d" input1 [18] $end
$var wire 1 e" input1 [17] $end
$var wire 1 f" input1 [16] $end
$var wire 1 g" input1 [15] $end
$var wire 1 h" input1 [14] $end
$var wire 1 i" input1 [13] $end
$var wire 1 j" input1 [12] $end
$var wire 1 k" input1 [11] $end
$var wire 1 l" input1 [10] $end
$var wire 1 m" input1 [9] $end
$var wire 1 n" input1 [8] $end
$var wire 1 o" input1 [7] $end
$var wire 1 p" input1 [6] $end
$var wire 1 q" input1 [5] $end
$var wire 1 r" input1 [4] $end
$var wire 1 s" input1 [3] $end
$var wire 1 t" input1 [2] $end
$var wire 1 u" input1 [1] $end
$var wire 1 v" input1 [0] $end
$var wire 1 w" sel $end
$var reg 32 x" out [31:0] $end
$upscope $end

$scope module _alu $end
$var wire 1 y" rs1 [31] $end
$var wire 1 z" rs1 [30] $end
$var wire 1 {" rs1 [29] $end
$var wire 1 |" rs1 [28] $end
$var wire 1 }" rs1 [27] $end
$var wire 1 ~" rs1 [26] $end
$var wire 1 !# rs1 [25] $end
$var wire 1 "# rs1 [24] $end
$var wire 1 ## rs1 [23] $end
$var wire 1 $# rs1 [22] $end
$var wire 1 %# rs1 [21] $end
$var wire 1 &# rs1 [20] $end
$var wire 1 '# rs1 [19] $end
$var wire 1 (# rs1 [18] $end
$var wire 1 )# rs1 [17] $end
$var wire 1 *# rs1 [16] $end
$var wire 1 +# rs1 [15] $end
$var wire 1 ,# rs1 [14] $end
$var wire 1 -# rs1 [13] $end
$var wire 1 .# rs1 [12] $end
$var wire 1 /# rs1 [11] $end
$var wire 1 0# rs1 [10] $end
$var wire 1 1# rs1 [9] $end
$var wire 1 2# rs1 [8] $end
$var wire 1 3# rs1 [7] $end
$var wire 1 4# rs1 [6] $end
$var wire 1 5# rs1 [5] $end
$var wire 1 6# rs1 [4] $end
$var wire 1 7# rs1 [3] $end
$var wire 1 8# rs1 [2] $end
$var wire 1 9# rs1 [1] $end
$var wire 1 :# rs1 [0] $end
$var wire 1 ;# rs2 [31] $end
$var wire 1 <# rs2 [30] $end
$var wire 1 =# rs2 [29] $end
$var wire 1 ># rs2 [28] $end
$var wire 1 ?# rs2 [27] $end
$var wire 1 @# rs2 [26] $end
$var wire 1 A# rs2 [25] $end
$var wire 1 B# rs2 [24] $end
$var wire 1 C# rs2 [23] $end
$var wire 1 D# rs2 [22] $end
$var wire 1 E# rs2 [21] $end
$var wire 1 F# rs2 [20] $end
$var wire 1 G# rs2 [19] $end
$var wire 1 H# rs2 [18] $end
$var wire 1 I# rs2 [17] $end
$var wire 1 J# rs2 [16] $end
$var wire 1 K# rs2 [15] $end
$var wire 1 L# rs2 [14] $end
$var wire 1 M# rs2 [13] $end
$var wire 1 N# rs2 [12] $end
$var wire 1 O# rs2 [11] $end
$var wire 1 P# rs2 [10] $end
$var wire 1 Q# rs2 [9] $end
$var wire 1 R# rs2 [8] $end
$var wire 1 S# rs2 [7] $end
$var wire 1 T# rs2 [6] $end
$var wire 1 U# rs2 [5] $end
$var wire 1 V# rs2 [4] $end
$var wire 1 W# rs2 [3] $end
$var wire 1 X# rs2 [2] $end
$var wire 1 Y# rs2 [1] $end
$var wire 1 Z# rs2 [0] $end
$var wire 1 [# alu_op [3] $end
$var wire 1 \# alu_op [2] $end
$var wire 1 ]# alu_op [1] $end
$var wire 1 ^# alu_op [0] $end
$var reg 32 _# result [31:0] $end
$upscope $end

$scope module Data_memory $end
$var wire 1 `# wdata_mem [31] $end
$var wire 1 a# wdata_mem [30] $end
$var wire 1 b# wdata_mem [29] $end
$var wire 1 c# wdata_mem [28] $end
$var wire 1 d# wdata_mem [27] $end
$var wire 1 e# wdata_mem [26] $end
$var wire 1 f# wdata_mem [25] $end
$var wire 1 g# wdata_mem [24] $end
$var wire 1 h# wdata_mem [23] $end
$var wire 1 i# wdata_mem [22] $end
$var wire 1 j# wdata_mem [21] $end
$var wire 1 k# wdata_mem [20] $end
$var wire 1 l# wdata_mem [19] $end
$var wire 1 m# wdata_mem [18] $end
$var wire 1 n# wdata_mem [17] $end
$var wire 1 o# wdata_mem [16] $end
$var wire 1 p# wdata_mem [15] $end
$var wire 1 q# wdata_mem [14] $end
$var wire 1 r# wdata_mem [13] $end
$var wire 1 s# wdata_mem [12] $end
$var wire 1 t# wdata_mem [11] $end
$var wire 1 u# wdata_mem [10] $end
$var wire 1 v# wdata_mem [9] $end
$var wire 1 w# wdata_mem [8] $end
$var wire 1 x# wdata_mem [7] $end
$var wire 1 y# wdata_mem [6] $end
$var wire 1 z# wdata_mem [5] $end
$var wire 1 {# wdata_mem [4] $end
$var wire 1 |# wdata_mem [3] $end
$var wire 1 }# wdata_mem [2] $end
$var wire 1 ~# wdata_mem [1] $end
$var wire 1 !$ wdata_mem [0] $end
$var wire 1 "$ addr_mem [31] $end
$var wire 1 #$ addr_mem [30] $end
$var wire 1 $$ addr_mem [29] $end
$var wire 1 %$ addr_mem [28] $end
$var wire 1 &$ addr_mem [27] $end
$var wire 1 '$ addr_mem [26] $end
$var wire 1 ($ addr_mem [25] $end
$var wire 1 )$ addr_mem [24] $end
$var wire 1 *$ addr_mem [23] $end
$var wire 1 +$ addr_mem [22] $end
$var wire 1 ,$ addr_mem [21] $end
$var wire 1 -$ addr_mem [20] $end
$var wire 1 .$ addr_mem [19] $end
$var wire 1 /$ addr_mem [18] $end
$var wire 1 0$ addr_mem [17] $end
$var wire 1 1$ addr_mem [16] $end
$var wire 1 2$ addr_mem [15] $end
$var wire 1 3$ addr_mem [14] $end
$var wire 1 4$ addr_mem [13] $end
$var wire 1 5$ addr_mem [12] $end
$var wire 1 6$ addr_mem [11] $end
$var wire 1 7$ addr_mem [10] $end
$var wire 1 8$ addr_mem [9] $end
$var wire 1 9$ addr_mem [8] $end
$var wire 1 :$ addr_mem [7] $end
$var wire 1 ;$ addr_mem [6] $end
$var wire 1 <$ addr_mem [5] $end
$var wire 1 =$ addr_mem [4] $end
$var wire 1 >$ addr_mem [3] $end
$var wire 1 ?$ addr_mem [2] $end
$var wire 1 @$ addr_mem [1] $end
$var wire 1 A$ addr_mem [0] $end
$var wire 1 B$ rd_wr_mem [2] $end
$var wire 1 C$ rd_wr_mem [1] $end
$var wire 1 D$ rd_wr_mem [0] $end
$var wire 1 E$ mem_wr $end
$var wire 1 $ clock $end
$var wire 1 # reset $end
$var reg 32 F$ rdata [31:0] $end
$upscope $end

$scope module writeback_mux $end
$var wire 1 G$ input0 [31] $end
$var wire 1 H$ input0 [30] $end
$var wire 1 I$ input0 [29] $end
$var wire 1 J$ input0 [28] $end
$var wire 1 K$ input0 [27] $end
$var wire 1 L$ input0 [26] $end
$var wire 1 M$ input0 [25] $end
$var wire 1 N$ input0 [24] $end
$var wire 1 O$ input0 [23] $end
$var wire 1 P$ input0 [22] $end
$var wire 1 Q$ input0 [21] $end
$var wire 1 R$ input0 [20] $end
$var wire 1 S$ input0 [19] $end
$var wire 1 T$ input0 [18] $end
$var wire 1 U$ input0 [17] $end
$var wire 1 V$ input0 [16] $end
$var wire 1 W$ input0 [15] $end
$var wire 1 X$ input0 [14] $end
$var wire 1 Y$ input0 [13] $end
$var wire 1 Z$ input0 [12] $end
$var wire 1 [$ input0 [11] $end
$var wire 1 \$ input0 [10] $end
$var wire 1 ]$ input0 [9] $end
$var wire 1 ^$ input0 [8] $end
$var wire 1 _$ input0 [7] $end
$var wire 1 `$ input0 [6] $end
$var wire 1 a$ input0 [5] $end
$var wire 1 b$ input0 [4] $end
$var wire 1 c$ input0 [3] $end
$var wire 1 d$ input0 [2] $end
$var wire 1 e$ input0 [1] $end
$var wire 1 f$ input0 [0] $end
$var wire 1 g$ input1 [31] $end
$var wire 1 h$ input1 [30] $end
$var wire 1 i$ input1 [29] $end
$var wire 1 j$ input1 [28] $end
$var wire 1 k$ input1 [27] $end
$var wire 1 l$ input1 [26] $end
$var wire 1 m$ input1 [25] $end
$var wire 1 n$ input1 [24] $end
$var wire 1 o$ input1 [23] $end
$var wire 1 p$ input1 [22] $end
$var wire 1 q$ input1 [21] $end
$var wire 1 r$ input1 [20] $end
$var wire 1 s$ input1 [19] $end
$var wire 1 t$ input1 [18] $end
$var wire 1 u$ input1 [17] $end
$var wire 1 v$ input1 [16] $end
$var wire 1 w$ input1 [15] $end
$var wire 1 x$ input1 [14] $end
$var wire 1 y$ input1 [13] $end
$var wire 1 z$ input1 [12] $end
$var wire 1 {$ input1 [11] $end
$var wire 1 |$ input1 [10] $end
$var wire 1 }$ input1 [9] $end
$var wire 1 ~$ input1 [8] $end
$var wire 1 !% input1 [7] $end
$var wire 1 "% input1 [6] $end
$var wire 1 #% input1 [5] $end
$var wire 1 $% input1 [4] $end
$var wire 1 %% input1 [3] $end
$var wire 1 &% input1 [2] $end
$var wire 1 '% input1 [1] $end
$var wire 1 (% input1 [0] $end
$var wire 1 )% input2 [31] $end
$var wire 1 *% input2 [30] $end
$var wire 1 +% input2 [29] $end
$var wire 1 ,% input2 [28] $end
$var wire 1 -% input2 [27] $end
$var wire 1 .% input2 [26] $end
$var wire 1 /% input2 [25] $end
$var wire 1 0% input2 [24] $end
$var wire 1 1% input2 [23] $end
$var wire 1 2% input2 [22] $end
$var wire 1 3% input2 [21] $end
$var wire 1 4% input2 [20] $end
$var wire 1 5% input2 [19] $end
$var wire 1 6% input2 [18] $end
$var wire 1 7% input2 [17] $end
$var wire 1 8% input2 [16] $end
$var wire 1 9% input2 [15] $end
$var wire 1 :% input2 [14] $end
$var wire 1 ;% input2 [13] $end
$var wire 1 <% input2 [12] $end
$var wire 1 =% input2 [11] $end
$var wire 1 >% input2 [10] $end
$var wire 1 ?% input2 [9] $end
$var wire 1 @% input2 [8] $end
$var wire 1 A% input2 [7] $end
$var wire 1 B% input2 [6] $end
$var wire 1 C% input2 [5] $end
$var wire 1 D% input2 [4] $end
$var wire 1 E% input2 [3] $end
$var wire 1 F% input2 [2] $end
$var wire 1 G% input2 [1] $end
$var wire 1 H% input2 [0] $end
$var wire 1 I% sel [1] $end
$var wire 1 J% sel [0] $end
$var reg 32 K% out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
bx %
bx &
bx '
bx (
bx )
bx *
bx +
b0 ,
bx -
bx .
b0 /
bx 0
b0 1
02
03
04
bx 5
bx v
bx 9!
bx j!
bx k!
0."
0/"
00"
b0 1"
bx 2"
b0 3"
b0 4"
bx 5"
bx 6"
bx x"
bx _#
bx F$
bx K%
0$
1#
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
0"$
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
x>!
x=!
x<!
x;!
x:!
xC!
xB!
xA!
x@!
x?!
xH!
xG!
xF!
xE!
xD!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
0i!
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0w"
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
0^#
0]#
0\#
0[#
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
0E$
xD$
xC$
xB$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
0J%
0I%
$end
#5
1!
1$
b0 5
b0 &
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
b0 9!
b100 v
b100 '
b0 %
0U
0T
1S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0H%
0G%
1F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
b0 6"
b0 5"
b0 2"
b0 j!
b0 k!
b0 *
b0 )
b0 0
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
b0 x"
b0 +
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0D$
0C$
0B$
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
b0 _#
b0 (
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
b0 F$
b0 K%
b0 .
b0 -
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
#10
0"
0!
0#
0$
#15
1!
1$
b100 5
b100 &
1s
16!
b1000 v
b1000 '
0S
1R
0F%
1E%
#20
0!
0$
#25
1!
1$
b1000 5
b1000 &
0s
1r
06!
15!
b1100 v
b1100 '
1S
1F%
#30
0!
0$
#35
1!
1$
b1100 5
b1100 &
1s
16!
b10000 v
b10000 '
0S
0R
1Q
0F%
0E%
1D%
#40
0!
0$
#45
1!
1$
b10000 5
b10000 &
0s
0r
1q
06!
05!
14!
b10100 v
b10100 '
1S
1F%
#50
0!
0$
#55
1!
1$
b10100 5
b10100 &
1s
16!
b11000 v
b11000 '
0S
1R
0F%
1E%
#60
0!
0$
#65
1!
1$
b11000 5
b11000 &
0s
1r
06!
15!
b11100 v
b11100 '
1S
1F%
#70
0!
0$
#75
1!
1$
b11100 5
b11100 &
1s
16!
b100000 v
b100000 '
0S
0R
0Q
1P
0F%
0E%
0D%
1C%
#80
0!
0$
#85
1!
1$
b100000 5
b100000 &
0s
0r
0q
1p
06!
05!
04!
13!
b100100 v
b100100 '
1S
1F%
#90
0!
0$
#95
1!
1$
b100100 5
b100100 &
1s
16!
b101000 v
b101000 '
0S
1R
0F%
1E%
#100
0!
0$
#105
1!
1$
b101000 5
b101000 &
0s
1r
06!
15!
b101100 v
b101100 '
1S
1F%
