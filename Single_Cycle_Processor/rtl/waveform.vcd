$date
	Tue Feb 18 02:08:12 2025
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module single_cycle_tb $end
$var reg 1 ! clock $end
$var reg 1 " reset $end

$scope module uut $end
$var wire 1 # reset $end
$var wire 1 $ clock $end
$var reg 32 % inst [31:0] $end
$var reg 32 & pc [31:0] $end
$var reg 32 ' pc_next [31:0] $end
$var reg 32 ( result [31:0] $end
$var reg 32 ) rdata1 [31:0] $end
$var reg 32 * rdata2 [31:0] $end
$var reg 32 + rs1 [31:0] $end
$var reg 32 , rs2 [31:0] $end
$var reg 32 - immediate [31:0] $end
$var reg 32 . mem_rdata [31:0] $end
$var reg 32 / reg_data [31:0] $end
$var reg 32 0 pc_alu [31:0] $end
$var reg 4 1 alu_op [3:0] $end
$var reg 3 2 rd_wr_mem [2:0] $end
$var reg 3 3 br_type [2:0] $end
$var reg 2 4 wb_sel [1:0] $end
$var reg 1 5 reg_wr $end
$var reg 1 6 sel_B $end
$var reg 1 7 sel_A $end
$var reg 1 8 mem_wr $end
$var reg 1 9 br_taken $end

$scope module _pc $end
$var reg 32 : pc [31:0] $end
$var wire 1 $ clock $end
$var wire 1 # reset $end
$var wire 1 ; pc_in [31] $end
$var wire 1 < pc_in [30] $end
$var wire 1 = pc_in [29] $end
$var wire 1 > pc_in [28] $end
$var wire 1 ? pc_in [27] $end
$var wire 1 @ pc_in [26] $end
$var wire 1 A pc_in [25] $end
$var wire 1 B pc_in [24] $end
$var wire 1 C pc_in [23] $end
$var wire 1 D pc_in [22] $end
$var wire 1 E pc_in [21] $end
$var wire 1 F pc_in [20] $end
$var wire 1 G pc_in [19] $end
$var wire 1 H pc_in [18] $end
$var wire 1 I pc_in [17] $end
$var wire 1 J pc_in [16] $end
$var wire 1 K pc_in [15] $end
$var wire 1 L pc_in [14] $end
$var wire 1 M pc_in [13] $end
$var wire 1 N pc_in [12] $end
$var wire 1 O pc_in [11] $end
$var wire 1 P pc_in [10] $end
$var wire 1 Q pc_in [9] $end
$var wire 1 R pc_in [8] $end
$var wire 1 S pc_in [7] $end
$var wire 1 T pc_in [6] $end
$var wire 1 U pc_in [5] $end
$var wire 1 V pc_in [4] $end
$var wire 1 W pc_in [3] $end
$var wire 1 X pc_in [2] $end
$var wire 1 Y pc_in [1] $end
$var wire 1 Z pc_in [0] $end
$upscope $end

$scope module pc_4_add $end
$var wire 1 [ pc [31] $end
$var wire 1 \ pc [30] $end
$var wire 1 ] pc [29] $end
$var wire 1 ^ pc [28] $end
$var wire 1 _ pc [27] $end
$var wire 1 ` pc [26] $end
$var wire 1 a pc [25] $end
$var wire 1 b pc [24] $end
$var wire 1 c pc [23] $end
$var wire 1 d pc [22] $end
$var wire 1 e pc [21] $end
$var wire 1 f pc [20] $end
$var wire 1 g pc [19] $end
$var wire 1 h pc [18] $end
$var wire 1 i pc [17] $end
$var wire 1 j pc [16] $end
$var wire 1 k pc [15] $end
$var wire 1 l pc [14] $end
$var wire 1 m pc [13] $end
$var wire 1 n pc [12] $end
$var wire 1 o pc [11] $end
$var wire 1 p pc [10] $end
$var wire 1 q pc [9] $end
$var wire 1 r pc [8] $end
$var wire 1 s pc [7] $end
$var wire 1 t pc [6] $end
$var wire 1 u pc [5] $end
$var wire 1 v pc [4] $end
$var wire 1 w pc [3] $end
$var wire 1 x pc [2] $end
$var wire 1 y pc [1] $end
$var wire 1 z pc [0] $end
$var reg 32 { pc_next [31:0] $end
$upscope $end

$scope module PC_ALU_sel $end
$var wire 1 | input0 [31] $end
$var wire 1 } input0 [30] $end
$var wire 1 ~ input0 [29] $end
$var wire 1 !! input0 [28] $end
$var wire 1 "! input0 [27] $end
$var wire 1 #! input0 [26] $end
$var wire 1 $! input0 [25] $end
$var wire 1 %! input0 [24] $end
$var wire 1 &! input0 [23] $end
$var wire 1 '! input0 [22] $end
$var wire 1 (! input0 [21] $end
$var wire 1 )! input0 [20] $end
$var wire 1 *! input0 [19] $end
$var wire 1 +! input0 [18] $end
$var wire 1 ,! input0 [17] $end
$var wire 1 -! input0 [16] $end
$var wire 1 .! input0 [15] $end
$var wire 1 /! input0 [14] $end
$var wire 1 0! input0 [13] $end
$var wire 1 1! input0 [12] $end
$var wire 1 2! input0 [11] $end
$var wire 1 3! input0 [10] $end
$var wire 1 4! input0 [9] $end
$var wire 1 5! input0 [8] $end
$var wire 1 6! input0 [7] $end
$var wire 1 7! input0 [6] $end
$var wire 1 8! input0 [5] $end
$var wire 1 9! input0 [4] $end
$var wire 1 :! input0 [3] $end
$var wire 1 ;! input0 [2] $end
$var wire 1 <! input0 [1] $end
$var wire 1 =! input0 [0] $end
$var wire 1 >! input1 [31] $end
$var wire 1 ?! input1 [30] $end
$var wire 1 @! input1 [29] $end
$var wire 1 A! input1 [28] $end
$var wire 1 B! input1 [27] $end
$var wire 1 C! input1 [26] $end
$var wire 1 D! input1 [25] $end
$var wire 1 E! input1 [24] $end
$var wire 1 F! input1 [23] $end
$var wire 1 G! input1 [22] $end
$var wire 1 H! input1 [21] $end
$var wire 1 I! input1 [20] $end
$var wire 1 J! input1 [19] $end
$var wire 1 K! input1 [18] $end
$var wire 1 L! input1 [17] $end
$var wire 1 M! input1 [16] $end
$var wire 1 N! input1 [15] $end
$var wire 1 O! input1 [14] $end
$var wire 1 P! input1 [13] $end
$var wire 1 Q! input1 [12] $end
$var wire 1 R! input1 [11] $end
$var wire 1 S! input1 [10] $end
$var wire 1 T! input1 [9] $end
$var wire 1 U! input1 [8] $end
$var wire 1 V! input1 [7] $end
$var wire 1 W! input1 [6] $end
$var wire 1 X! input1 [5] $end
$var wire 1 Y! input1 [4] $end
$var wire 1 Z! input1 [3] $end
$var wire 1 [! input1 [2] $end
$var wire 1 \! input1 [1] $end
$var wire 1 ]! input1 [0] $end
$var wire 1 ^! sel $end
$var reg 32 _! out [31:0] $end
$upscope $end

$scope module _instruction_memory $end
$var wire 1 `! addr [31] $end
$var wire 1 a! addr [30] $end
$var wire 1 b! addr [29] $end
$var wire 1 c! addr [28] $end
$var wire 1 d! addr [27] $end
$var wire 1 e! addr [26] $end
$var wire 1 f! addr [25] $end
$var wire 1 g! addr [24] $end
$var wire 1 h! addr [23] $end
$var wire 1 i! addr [22] $end
$var wire 1 j! addr [21] $end
$var wire 1 k! addr [20] $end
$var wire 1 l! addr [19] $end
$var wire 1 m! addr [18] $end
$var wire 1 n! addr [17] $end
$var wire 1 o! addr [16] $end
$var wire 1 p! addr [15] $end
$var wire 1 q! addr [14] $end
$var wire 1 r! addr [13] $end
$var wire 1 s! addr [12] $end
$var wire 1 t! addr [11] $end
$var wire 1 u! addr [10] $end
$var wire 1 v! addr [9] $end
$var wire 1 w! addr [8] $end
$var wire 1 x! addr [7] $end
$var wire 1 y! addr [6] $end
$var wire 1 z! addr [5] $end
$var wire 1 {! addr [4] $end
$var wire 1 |! addr [3] $end
$var wire 1 }! addr [2] $end
$var wire 1 ~! addr [1] $end
$var wire 1 !" addr [0] $end
$var reg 32 "" inst [31:0] $end
$upscope $end

$scope module _registerfile $end
$var wire 1 #" raddr1 [4] $end
$var wire 1 $" raddr1 [3] $end
$var wire 1 %" raddr1 [2] $end
$var wire 1 &" raddr1 [1] $end
$var wire 1 '" raddr1 [0] $end
$var wire 1 (" raddr2 [4] $end
$var wire 1 )" raddr2 [3] $end
$var wire 1 *" raddr2 [2] $end
$var wire 1 +" raddr2 [1] $end
$var wire 1 ," raddr2 [0] $end
$var wire 1 -" waddr [4] $end
$var wire 1 ." waddr [3] $end
$var wire 1 /" waddr [2] $end
$var wire 1 0" waddr [1] $end
$var wire 1 1" waddr [0] $end
$var wire 1 2" wdata [31] $end
$var wire 1 3" wdata [30] $end
$var wire 1 4" wdata [29] $end
$var wire 1 5" wdata [28] $end
$var wire 1 6" wdata [27] $end
$var wire 1 7" wdata [26] $end
$var wire 1 8" wdata [25] $end
$var wire 1 9" wdata [24] $end
$var wire 1 :" wdata [23] $end
$var wire 1 ;" wdata [22] $end
$var wire 1 <" wdata [21] $end
$var wire 1 =" wdata [20] $end
$var wire 1 >" wdata [19] $end
$var wire 1 ?" wdata [18] $end
$var wire 1 @" wdata [17] $end
$var wire 1 A" wdata [16] $end
$var wire 1 B" wdata [15] $end
$var wire 1 C" wdata [14] $end
$var wire 1 D" wdata [13] $end
$var wire 1 E" wdata [12] $end
$var wire 1 F" wdata [11] $end
$var wire 1 G" wdata [10] $end
$var wire 1 H" wdata [9] $end
$var wire 1 I" wdata [8] $end
$var wire 1 J" wdata [7] $end
$var wire 1 K" wdata [6] $end
$var wire 1 L" wdata [5] $end
$var wire 1 M" wdata [4] $end
$var wire 1 N" wdata [3] $end
$var wire 1 O" wdata [2] $end
$var wire 1 P" wdata [1] $end
$var wire 1 Q" wdata [0] $end
$var wire 1 R" reg_wr $end
$var wire 1 $ clock $end
$var wire 1 # reset $end
$var reg 32 S" rdata1 [31:0] $end
$var reg 32 T" rdata2 [31:0] $end
$upscope $end

$scope module _decoder $end
$var wire 1 U" instruction [31] $end
$var wire 1 V" instruction [30] $end
$var wire 1 W" instruction [29] $end
$var wire 1 X" instruction [28] $end
$var wire 1 Y" instruction [27] $end
$var wire 1 Z" instruction [26] $end
$var wire 1 [" instruction [25] $end
$var wire 1 \" instruction [24] $end
$var wire 1 ]" instruction [23] $end
$var wire 1 ^" instruction [22] $end
$var wire 1 _" instruction [21] $end
$var wire 1 `" instruction [20] $end
$var wire 1 a" instruction [19] $end
$var wire 1 b" instruction [18] $end
$var wire 1 c" instruction [17] $end
$var wire 1 d" instruction [16] $end
$var wire 1 e" instruction [15] $end
$var wire 1 f" instruction [14] $end
$var wire 1 g" instruction [13] $end
$var wire 1 h" instruction [12] $end
$var wire 1 i" instruction [11] $end
$var wire 1 j" instruction [10] $end
$var wire 1 k" instruction [9] $end
$var wire 1 l" instruction [8] $end
$var wire 1 m" instruction [7] $end
$var wire 1 n" instruction [6] $end
$var wire 1 o" instruction [5] $end
$var wire 1 p" instruction [4] $end
$var wire 1 q" instruction [3] $end
$var wire 1 r" instruction [2] $end
$var wire 1 s" instruction [1] $end
$var wire 1 t" instruction [0] $end
$var reg 1 u" reg_wr $end
$var reg 1 v" sel_B $end
$var reg 1 w" mem_wr $end
$var reg 1 x" sel_A $end
$var reg 2 y" wb_sel [1:0] $end
$var reg 3 z" rd_wr_mem [2:0] $end
$var reg 3 {" br_type [2:0] $end
$var reg 32 |" immediate [31:0] $end
$var reg 4 }" alu_op [3:0] $end
$var reg 3 ~" funct3 [2:0] $end
$var reg 7 !# opcode [6:0] $end
$upscope $end

$scope module Sel_A $end
$var wire 1 "# input0 [31] $end
$var wire 1 ## input0 [30] $end
$var wire 1 $# input0 [29] $end
$var wire 1 %# input0 [28] $end
$var wire 1 &# input0 [27] $end
$var wire 1 '# input0 [26] $end
$var wire 1 (# input0 [25] $end
$var wire 1 )# input0 [24] $end
$var wire 1 *# input0 [23] $end
$var wire 1 +# input0 [22] $end
$var wire 1 ,# input0 [21] $end
$var wire 1 -# input0 [20] $end
$var wire 1 .# input0 [19] $end
$var wire 1 /# input0 [18] $end
$var wire 1 0# input0 [17] $end
$var wire 1 1# input0 [16] $end
$var wire 1 2# input0 [15] $end
$var wire 1 3# input0 [14] $end
$var wire 1 4# input0 [13] $end
$var wire 1 5# input0 [12] $end
$var wire 1 6# input0 [11] $end
$var wire 1 7# input0 [10] $end
$var wire 1 8# input0 [9] $end
$var wire 1 9# input0 [8] $end
$var wire 1 :# input0 [7] $end
$var wire 1 ;# input0 [6] $end
$var wire 1 <# input0 [5] $end
$var wire 1 =# input0 [4] $end
$var wire 1 ># input0 [3] $end
$var wire 1 ?# input0 [2] $end
$var wire 1 @# input0 [1] $end
$var wire 1 A# input0 [0] $end
$var wire 1 B# input1 [31] $end
$var wire 1 C# input1 [30] $end
$var wire 1 D# input1 [29] $end
$var wire 1 E# input1 [28] $end
$var wire 1 F# input1 [27] $end
$var wire 1 G# input1 [26] $end
$var wire 1 H# input1 [25] $end
$var wire 1 I# input1 [24] $end
$var wire 1 J# input1 [23] $end
$var wire 1 K# input1 [22] $end
$var wire 1 L# input1 [21] $end
$var wire 1 M# input1 [20] $end
$var wire 1 N# input1 [19] $end
$var wire 1 O# input1 [18] $end
$var wire 1 P# input1 [17] $end
$var wire 1 Q# input1 [16] $end
$var wire 1 R# input1 [15] $end
$var wire 1 S# input1 [14] $end
$var wire 1 T# input1 [13] $end
$var wire 1 U# input1 [12] $end
$var wire 1 V# input1 [11] $end
$var wire 1 W# input1 [10] $end
$var wire 1 X# input1 [9] $end
$var wire 1 Y# input1 [8] $end
$var wire 1 Z# input1 [7] $end
$var wire 1 [# input1 [6] $end
$var wire 1 \# input1 [5] $end
$var wire 1 ]# input1 [4] $end
$var wire 1 ^# input1 [3] $end
$var wire 1 _# input1 [2] $end
$var wire 1 `# input1 [1] $end
$var wire 1 a# input1 [0] $end
$var wire 1 b# sel $end
$var reg 32 c# out [31:0] $end
$upscope $end

$scope module Sel_B $end
$var wire 1 d# input0 [31] $end
$var wire 1 e# input0 [30] $end
$var wire 1 f# input0 [29] $end
$var wire 1 g# input0 [28] $end
$var wire 1 h# input0 [27] $end
$var wire 1 i# input0 [26] $end
$var wire 1 j# input0 [25] $end
$var wire 1 k# input0 [24] $end
$var wire 1 l# input0 [23] $end
$var wire 1 m# input0 [22] $end
$var wire 1 n# input0 [21] $end
$var wire 1 o# input0 [20] $end
$var wire 1 p# input0 [19] $end
$var wire 1 q# input0 [18] $end
$var wire 1 r# input0 [17] $end
$var wire 1 s# input0 [16] $end
$var wire 1 t# input0 [15] $end
$var wire 1 u# input0 [14] $end
$var wire 1 v# input0 [13] $end
$var wire 1 w# input0 [12] $end
$var wire 1 x# input0 [11] $end
$var wire 1 y# input0 [10] $end
$var wire 1 z# input0 [9] $end
$var wire 1 {# input0 [8] $end
$var wire 1 |# input0 [7] $end
$var wire 1 }# input0 [6] $end
$var wire 1 ~# input0 [5] $end
$var wire 1 !$ input0 [4] $end
$var wire 1 "$ input0 [3] $end
$var wire 1 #$ input0 [2] $end
$var wire 1 $$ input0 [1] $end
$var wire 1 %$ input0 [0] $end
$var wire 1 &$ input1 [31] $end
$var wire 1 '$ input1 [30] $end
$var wire 1 ($ input1 [29] $end
$var wire 1 )$ input1 [28] $end
$var wire 1 *$ input1 [27] $end
$var wire 1 +$ input1 [26] $end
$var wire 1 ,$ input1 [25] $end
$var wire 1 -$ input1 [24] $end
$var wire 1 .$ input1 [23] $end
$var wire 1 /$ input1 [22] $end
$var wire 1 0$ input1 [21] $end
$var wire 1 1$ input1 [20] $end
$var wire 1 2$ input1 [19] $end
$var wire 1 3$ input1 [18] $end
$var wire 1 4$ input1 [17] $end
$var wire 1 5$ input1 [16] $end
$var wire 1 6$ input1 [15] $end
$var wire 1 7$ input1 [14] $end
$var wire 1 8$ input1 [13] $end
$var wire 1 9$ input1 [12] $end
$var wire 1 :$ input1 [11] $end
$var wire 1 ;$ input1 [10] $end
$var wire 1 <$ input1 [9] $end
$var wire 1 =$ input1 [8] $end
$var wire 1 >$ input1 [7] $end
$var wire 1 ?$ input1 [6] $end
$var wire 1 @$ input1 [5] $end
$var wire 1 A$ input1 [4] $end
$var wire 1 B$ input1 [3] $end
$var wire 1 C$ input1 [2] $end
$var wire 1 D$ input1 [1] $end
$var wire 1 E$ input1 [0] $end
$var wire 1 F$ sel $end
$var reg 32 G$ out [31:0] $end
$upscope $end

$scope module _alu $end
$var wire 1 H$ rs1 [31] $end
$var wire 1 I$ rs1 [30] $end
$var wire 1 J$ rs1 [29] $end
$var wire 1 K$ rs1 [28] $end
$var wire 1 L$ rs1 [27] $end
$var wire 1 M$ rs1 [26] $end
$var wire 1 N$ rs1 [25] $end
$var wire 1 O$ rs1 [24] $end
$var wire 1 P$ rs1 [23] $end
$var wire 1 Q$ rs1 [22] $end
$var wire 1 R$ rs1 [21] $end
$var wire 1 S$ rs1 [20] $end
$var wire 1 T$ rs1 [19] $end
$var wire 1 U$ rs1 [18] $end
$var wire 1 V$ rs1 [17] $end
$var wire 1 W$ rs1 [16] $end
$var wire 1 X$ rs1 [15] $end
$var wire 1 Y$ rs1 [14] $end
$var wire 1 Z$ rs1 [13] $end
$var wire 1 [$ rs1 [12] $end
$var wire 1 \$ rs1 [11] $end
$var wire 1 ]$ rs1 [10] $end
$var wire 1 ^$ rs1 [9] $end
$var wire 1 _$ rs1 [8] $end
$var wire 1 `$ rs1 [7] $end
$var wire 1 a$ rs1 [6] $end
$var wire 1 b$ rs1 [5] $end
$var wire 1 c$ rs1 [4] $end
$var wire 1 d$ rs1 [3] $end
$var wire 1 e$ rs1 [2] $end
$var wire 1 f$ rs1 [1] $end
$var wire 1 g$ rs1 [0] $end
$var wire 1 h$ rs2 [31] $end
$var wire 1 i$ rs2 [30] $end
$var wire 1 j$ rs2 [29] $end
$var wire 1 k$ rs2 [28] $end
$var wire 1 l$ rs2 [27] $end
$var wire 1 m$ rs2 [26] $end
$var wire 1 n$ rs2 [25] $end
$var wire 1 o$ rs2 [24] $end
$var wire 1 p$ rs2 [23] $end
$var wire 1 q$ rs2 [22] $end
$var wire 1 r$ rs2 [21] $end
$var wire 1 s$ rs2 [20] $end
$var wire 1 t$ rs2 [19] $end
$var wire 1 u$ rs2 [18] $end
$var wire 1 v$ rs2 [17] $end
$var wire 1 w$ rs2 [16] $end
$var wire 1 x$ rs2 [15] $end
$var wire 1 y$ rs2 [14] $end
$var wire 1 z$ rs2 [13] $end
$var wire 1 {$ rs2 [12] $end
$var wire 1 |$ rs2 [11] $end
$var wire 1 }$ rs2 [10] $end
$var wire 1 ~$ rs2 [9] $end
$var wire 1 !% rs2 [8] $end
$var wire 1 "% rs2 [7] $end
$var wire 1 #% rs2 [6] $end
$var wire 1 $% rs2 [5] $end
$var wire 1 %% rs2 [4] $end
$var wire 1 &% rs2 [3] $end
$var wire 1 '% rs2 [2] $end
$var wire 1 (% rs2 [1] $end
$var wire 1 )% rs2 [0] $end
$var wire 1 *% alu_op [3] $end
$var wire 1 +% alu_op [2] $end
$var wire 1 ,% alu_op [1] $end
$var wire 1 -% alu_op [0] $end
$var reg 32 .% result [31:0] $end
$upscope $end

$scope module Data_memory $end
$var wire 1 /% wdata_mem [31] $end
$var wire 1 0% wdata_mem [30] $end
$var wire 1 1% wdata_mem [29] $end
$var wire 1 2% wdata_mem [28] $end
$var wire 1 3% wdata_mem [27] $end
$var wire 1 4% wdata_mem [26] $end
$var wire 1 5% wdata_mem [25] $end
$var wire 1 6% wdata_mem [24] $end
$var wire 1 7% wdata_mem [23] $end
$var wire 1 8% wdata_mem [22] $end
$var wire 1 9% wdata_mem [21] $end
$var wire 1 :% wdata_mem [20] $end
$var wire 1 ;% wdata_mem [19] $end
$var wire 1 <% wdata_mem [18] $end
$var wire 1 =% wdata_mem [17] $end
$var wire 1 >% wdata_mem [16] $end
$var wire 1 ?% wdata_mem [15] $end
$var wire 1 @% wdata_mem [14] $end
$var wire 1 A% wdata_mem [13] $end
$var wire 1 B% wdata_mem [12] $end
$var wire 1 C% wdata_mem [11] $end
$var wire 1 D% wdata_mem [10] $end
$var wire 1 E% wdata_mem [9] $end
$var wire 1 F% wdata_mem [8] $end
$var wire 1 G% wdata_mem [7] $end
$var wire 1 H% wdata_mem [6] $end
$var wire 1 I% wdata_mem [5] $end
$var wire 1 J% wdata_mem [4] $end
$var wire 1 K% wdata_mem [3] $end
$var wire 1 L% wdata_mem [2] $end
$var wire 1 M% wdata_mem [1] $end
$var wire 1 N% wdata_mem [0] $end
$var wire 1 O% addr_mem [31] $end
$var wire 1 P% addr_mem [30] $end
$var wire 1 Q% addr_mem [29] $end
$var wire 1 R% addr_mem [28] $end
$var wire 1 S% addr_mem [27] $end
$var wire 1 T% addr_mem [26] $end
$var wire 1 U% addr_mem [25] $end
$var wire 1 V% addr_mem [24] $end
$var wire 1 W% addr_mem [23] $end
$var wire 1 X% addr_mem [22] $end
$var wire 1 Y% addr_mem [21] $end
$var wire 1 Z% addr_mem [20] $end
$var wire 1 [% addr_mem [19] $end
$var wire 1 \% addr_mem [18] $end
$var wire 1 ]% addr_mem [17] $end
$var wire 1 ^% addr_mem [16] $end
$var wire 1 _% addr_mem [15] $end
$var wire 1 `% addr_mem [14] $end
$var wire 1 a% addr_mem [13] $end
$var wire 1 b% addr_mem [12] $end
$var wire 1 c% addr_mem [11] $end
$var wire 1 d% addr_mem [10] $end
$var wire 1 e% addr_mem [9] $end
$var wire 1 f% addr_mem [8] $end
$var wire 1 g% addr_mem [7] $end
$var wire 1 h% addr_mem [6] $end
$var wire 1 i% addr_mem [5] $end
$var wire 1 j% addr_mem [4] $end
$var wire 1 k% addr_mem [3] $end
$var wire 1 l% addr_mem [2] $end
$var wire 1 m% addr_mem [1] $end
$var wire 1 n% addr_mem [0] $end
$var wire 1 o% rd_wr_mem [2] $end
$var wire 1 p% rd_wr_mem [1] $end
$var wire 1 q% rd_wr_mem [0] $end
$var wire 1 r% mem_wr $end
$var wire 1 $ clock $end
$var wire 1 # reset $end
$var reg 32 s% rdata [31:0] $end
$upscope $end

$scope module writeback_mux $end
$var wire 1 t% input0 [31] $end
$var wire 1 u% input0 [30] $end
$var wire 1 v% input0 [29] $end
$var wire 1 w% input0 [28] $end
$var wire 1 x% input0 [27] $end
$var wire 1 y% input0 [26] $end
$var wire 1 z% input0 [25] $end
$var wire 1 {% input0 [24] $end
$var wire 1 |% input0 [23] $end
$var wire 1 }% input0 [22] $end
$var wire 1 ~% input0 [21] $end
$var wire 1 !& input0 [20] $end
$var wire 1 "& input0 [19] $end
$var wire 1 #& input0 [18] $end
$var wire 1 $& input0 [17] $end
$var wire 1 %& input0 [16] $end
$var wire 1 && input0 [15] $end
$var wire 1 '& input0 [14] $end
$var wire 1 (& input0 [13] $end
$var wire 1 )& input0 [12] $end
$var wire 1 *& input0 [11] $end
$var wire 1 +& input0 [10] $end
$var wire 1 ,& input0 [9] $end
$var wire 1 -& input0 [8] $end
$var wire 1 .& input0 [7] $end
$var wire 1 /& input0 [6] $end
$var wire 1 0& input0 [5] $end
$var wire 1 1& input0 [4] $end
$var wire 1 2& input0 [3] $end
$var wire 1 3& input0 [2] $end
$var wire 1 4& input0 [1] $end
$var wire 1 5& input0 [0] $end
$var wire 1 6& input1 [31] $end
$var wire 1 7& input1 [30] $end
$var wire 1 8& input1 [29] $end
$var wire 1 9& input1 [28] $end
$var wire 1 :& input1 [27] $end
$var wire 1 ;& input1 [26] $end
$var wire 1 <& input1 [25] $end
$var wire 1 =& input1 [24] $end
$var wire 1 >& input1 [23] $end
$var wire 1 ?& input1 [22] $end
$var wire 1 @& input1 [21] $end
$var wire 1 A& input1 [20] $end
$var wire 1 B& input1 [19] $end
$var wire 1 C& input1 [18] $end
$var wire 1 D& input1 [17] $end
$var wire 1 E& input1 [16] $end
$var wire 1 F& input1 [15] $end
$var wire 1 G& input1 [14] $end
$var wire 1 H& input1 [13] $end
$var wire 1 I& input1 [12] $end
$var wire 1 J& input1 [11] $end
$var wire 1 K& input1 [10] $end
$var wire 1 L& input1 [9] $end
$var wire 1 M& input1 [8] $end
$var wire 1 N& input1 [7] $end
$var wire 1 O& input1 [6] $end
$var wire 1 P& input1 [5] $end
$var wire 1 Q& input1 [4] $end
$var wire 1 R& input1 [3] $end
$var wire 1 S& input1 [2] $end
$var wire 1 T& input1 [1] $end
$var wire 1 U& input1 [0] $end
$var wire 1 V& input2 [31] $end
$var wire 1 W& input2 [30] $end
$var wire 1 X& input2 [29] $end
$var wire 1 Y& input2 [28] $end
$var wire 1 Z& input2 [27] $end
$var wire 1 [& input2 [26] $end
$var wire 1 \& input2 [25] $end
$var wire 1 ]& input2 [24] $end
$var wire 1 ^& input2 [23] $end
$var wire 1 _& input2 [22] $end
$var wire 1 `& input2 [21] $end
$var wire 1 a& input2 [20] $end
$var wire 1 b& input2 [19] $end
$var wire 1 c& input2 [18] $end
$var wire 1 d& input2 [17] $end
$var wire 1 e& input2 [16] $end
$var wire 1 f& input2 [15] $end
$var wire 1 g& input2 [14] $end
$var wire 1 h& input2 [13] $end
$var wire 1 i& input2 [12] $end
$var wire 1 j& input2 [11] $end
$var wire 1 k& input2 [10] $end
$var wire 1 l& input2 [9] $end
$var wire 1 m& input2 [8] $end
$var wire 1 n& input2 [7] $end
$var wire 1 o& input2 [6] $end
$var wire 1 p& input2 [5] $end
$var wire 1 q& input2 [4] $end
$var wire 1 r& input2 [3] $end
$var wire 1 s& input2 [2] $end
$var wire 1 t& input2 [1] $end
$var wire 1 u& input2 [0] $end
$var wire 1 v& sel [1] $end
$var wire 1 w& sel [0] $end
$var reg 32 x& out [31:0] $end
$upscope $end

$scope module branch_condition $end
$var wire 1 y& rdata1 [31] $end
$var wire 1 z& rdata1 [30] $end
$var wire 1 {& rdata1 [29] $end
$var wire 1 |& rdata1 [28] $end
$var wire 1 }& rdata1 [27] $end
$var wire 1 ~& rdata1 [26] $end
$var wire 1 !' rdata1 [25] $end
$var wire 1 "' rdata1 [24] $end
$var wire 1 #' rdata1 [23] $end
$var wire 1 $' rdata1 [22] $end
$var wire 1 %' rdata1 [21] $end
$var wire 1 &' rdata1 [20] $end
$var wire 1 '' rdata1 [19] $end
$var wire 1 (' rdata1 [18] $end
$var wire 1 )' rdata1 [17] $end
$var wire 1 *' rdata1 [16] $end
$var wire 1 +' rdata1 [15] $end
$var wire 1 ,' rdata1 [14] $end
$var wire 1 -' rdata1 [13] $end
$var wire 1 .' rdata1 [12] $end
$var wire 1 /' rdata1 [11] $end
$var wire 1 0' rdata1 [10] $end
$var wire 1 1' rdata1 [9] $end
$var wire 1 2' rdata1 [8] $end
$var wire 1 3' rdata1 [7] $end
$var wire 1 4' rdata1 [6] $end
$var wire 1 5' rdata1 [5] $end
$var wire 1 6' rdata1 [4] $end
$var wire 1 7' rdata1 [3] $end
$var wire 1 8' rdata1 [2] $end
$var wire 1 9' rdata1 [1] $end
$var wire 1 :' rdata1 [0] $end
$var wire 1 ;' rdata2 [31] $end
$var wire 1 <' rdata2 [30] $end
$var wire 1 =' rdata2 [29] $end
$var wire 1 >' rdata2 [28] $end
$var wire 1 ?' rdata2 [27] $end
$var wire 1 @' rdata2 [26] $end
$var wire 1 A' rdata2 [25] $end
$var wire 1 B' rdata2 [24] $end
$var wire 1 C' rdata2 [23] $end
$var wire 1 D' rdata2 [22] $end
$var wire 1 E' rdata2 [21] $end
$var wire 1 F' rdata2 [20] $end
$var wire 1 G' rdata2 [19] $end
$var wire 1 H' rdata2 [18] $end
$var wire 1 I' rdata2 [17] $end
$var wire 1 J' rdata2 [16] $end
$var wire 1 K' rdata2 [15] $end
$var wire 1 L' rdata2 [14] $end
$var wire 1 M' rdata2 [13] $end
$var wire 1 N' rdata2 [12] $end
$var wire 1 O' rdata2 [11] $end
$var wire 1 P' rdata2 [10] $end
$var wire 1 Q' rdata2 [9] $end
$var wire 1 R' rdata2 [8] $end
$var wire 1 S' rdata2 [7] $end
$var wire 1 T' rdata2 [6] $end
$var wire 1 U' rdata2 [5] $end
$var wire 1 V' rdata2 [4] $end
$var wire 1 W' rdata2 [3] $end
$var wire 1 X' rdata2 [2] $end
$var wire 1 Y' rdata2 [1] $end
$var wire 1 Z' rdata2 [0] $end
$var wire 1 [' br_type [2] $end
$var wire 1 \' br_type [1] $end
$var wire 1 ]' br_type [0] $end
$var reg 1 ^' br_taken $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
bx %
bx &
bx '
bx (
bx )
bx *
bx +
bx ,
b0 -
bx .
bx /
bx 0
b0 1
bx 2
b10 3
b0 4
05
06
07
08
09
bx :
bx {
bx _!
bx ""
bx S"
bx T"
0u"
0v"
0w"
0x"
b0 y"
bx z"
b10 {"
b0 |"
b0 }"
bx ~"
bx !#
bx c#
bx G$
bx .%
bx s%
bx x&
0^'
0$
1#
xn%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
0O%
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
0^!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x'"
x&"
x%"
x$"
x#"
x,"
x+"
x*"
x)"
x("
x1"
x0"
x/"
x."
x-"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
0R"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
0b#
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0F$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
0-%
0,%
0+%
0*%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
0r%
xq%
xp%
xo%
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
0w&
0v&
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
0]'
1\'
0['
$end
#5
1!
1$
b0 :
b0 &
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
b0 ""
b100 {
b100 '
b0 %
0=!
0<!
1;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
b100 _!
01"
00"
0/"
0."
0-"
b100 0
0Z
0Y
1X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0u&
0t&
1s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
b0 !#
b0 ~"
b0 z"
b0 S"
b0 T"
b0 *
b0 )
b0 2
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
b0 G$
b0 c#
b0 +
b0 ,
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0q%
0p%
0o%
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
0-'
0,'
0+'
0*'
0)'
0('
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
b0 .%
b0 (
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
05&
04&
03&
02&
01&
00&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
b0 s%
b0 x&
b0 /
b0 .
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
0U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
0M&
0L&
0K&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
#10
0"
0!
0#
0$
#15
1!
1$
b100 :
b100 &
1_#
1x
1}!
b1000 {
b1000 '
0;!
1:!
b1000 _!
b1000 0
0X
1W
0s&
1r&
#20
0!
0$
#25
1!
1$
b1000 :
b1000 &
0_#
1^#
0x
1w
0}!
1|!
b1100 {
b1100 '
1;!
b1100 _!
b1100 0
1X
1s&
#30
0!
0$
#35
1!
1$
b1100 :
b1100 &
1_#
1x
1}!
b10000 {
b10000 '
0;!
0:!
19!
b10000 _!
b10000 0
0X
0W
1V
0s&
0r&
1q&
#40
0!
0$
#45
1!
1$
b10000 :
b10000 &
0_#
0^#
1]#
0x
0w
1v
0}!
0|!
1{!
b10100 {
b10100 '
1;!
b10100 _!
b10100 0
1X
1s&
#50
0!
0$
#55
1!
1$
b10100 :
b10100 &
1_#
1x
1}!
b11000 {
b11000 '
0;!
1:!
b11000 _!
b11000 0
0X
1W
0s&
1r&
#60
0!
0$
#65
1!
1$
b11000 :
b11000 &
0_#
1^#
0x
1w
0}!
1|!
b11100 {
b11100 '
1;!
b11100 _!
b11100 0
1X
1s&
#70
0!
0$
#75
1!
1$
b11100 :
b11100 &
1_#
1x
1}!
b100000 {
b100000 '
0;!
0:!
09!
18!
b100000 _!
b100000 0
0X
0W
0V
1U
0s&
0r&
0q&
1p&
#80
0!
0$
#85
1!
1$
b100000 :
b100000 &
0_#
0^#
0]#
1\#
0x
0w
0v
1u
0}!
0|!
0{!
1z!
b100100 {
b100100 '
1;!
b100100 _!
b100100 0
1X
1s&
#90
0!
0$
#95
1!
1$
b100100 :
b100100 &
1_#
1x
1}!
b101000 {
b101000 '
0;!
1:!
b101000 _!
b101000 0
0X
1W
0s&
1r&
#100
0!
0$
#105
1!
1$
b101000 :
b101000 &
0_#
1^#
0x
1w
0}!
1|!
b101100 {
b101100 '
1;!
b101100 _!
b101100 0
1X
1s&
